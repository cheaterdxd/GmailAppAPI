/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package giaoDienApp;

import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.model.ListMessagesResponse;
import com.google.api.services.gmail.model.Message;
import customException.WrongLoginInfoException;
import gmailApi.GlobalVariable;
import gmailApi.LoginProcess;
import gmailApi.MessageObject;
import gmailApi.MessageProcess;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.DefaultListModel;

/**
 *
 * @author Admin
 */
public class loadDataMultiThread extends javax.swing.JFrame {

    /**
     * Creates new form loadDataMultiThread
     */
    public loadDataMultiThread() {
	initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        loadData_JList = new javax.swing.JList<>();
        loadData_bt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(loadData_JList);

        loadData_bt.setText("Load Data");
        loadData_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadData_btActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(loadData_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(316, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadData_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadData_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadData_btActionPerformed
	// TODO add your handling code here:
	new threadLoadListOb().start();
	new threadLoadJlist().start();
    }//GEN-LAST:event_loadData_btActionPerformed

    synchronized int loadDataToList(DefaultListModel listMail, List<MessageObject> listMsgOb, int lastLoadIndex) {
	int countMessage = lastLoadIndex;
	for (; countMessage < listMsgOb.size(); countMessage++) {
	    listMail.add(countMessage, listMsgOb.get(countMessage));
	}
	return countMessage;
    }
    static DefaultListModel listMail = new DefaultListModel(); // khởi tạo Listmodel để đổ dữ liệu vào
    static int countMessage;
    static int loadLastIndex = 0;
    static List<MessageObject> listMsgOb;

    static class threadLoadListOb extends Thread {

	@Override
	public void run() {
	    // đưa message thành Object
	    List<String> loadFromLabel = new ArrayList<>();
	    loadFromLabel.add("INBOX");
	    System.out.println("Bắt đầu threadLoadListOb");
	    try {
		try {
		    GlobalVariable.userId = "testdoan123456@gmail.com";
		    LoginProcess.login();
		} catch (WrongLoginInfoException ex) {
		    Logger.getLogger(loadDataThread.class.getName()).log(Level.SEVERE, null, ex);
		}
		Gmail service = GlobalVariable.getService();
		String userId = GlobalVariable.userId;
		//list response cua mail list
		ListMessagesResponse response;
		response = service.users().messages().list(userId).setLabelIds(loadFromLabel).setMaxResults(Long.valueOf(5)).execute();
		//doc tung mail

		List<Message> messages = new ArrayList<>();
		listMsgOb = new ArrayList<>();

		while (response.getMessages() != null) {
		    System.out.println("Load List Object !");
		    synchronized (this) {
			final long startTime = System.currentTimeMillis();
			messages.addAll(response.getMessages());
			for (Message msg : messages) {
			    MessageObject newMessOb = new MessageObject();
			    newMessOb.id = msg.getId();
			    newMessOb.from = MessageProcess.getFrom(MessageProcess.getMessageById(GlobalVariable.getService(), GlobalVariable.userId, newMessOb.id).getPayload().getHeaders());
			    listMsgOb.add(newMessOb); //MessageProcess.parseHeaderMail(msg.getId())
			}
			System.out.println("Load: "+(listMsgOb.size()-countMessage)+" Object; count="+countMessage);
			// đưa Object vào Model
			for (; countMessage < listMsgOb.size(); countMessage++) {
			    listMail.add(countMessage, listMsgOb.get(countMessage));
			}
			final long endTime = System.currentTimeMillis();

			System.out.println("Total execution time: " + (endTime - startTime));

			System.out.println("Đã load xong dữ liệu lên model");
		    }
		    try {
			if (response.getNextPageToken() != null) {
			    String pageToken = response.getNextPageToken();
			    response = service.users().messages().list(userId).setLabelIds(loadFromLabel).setPageToken(pageToken).setMaxResults(Long.valueOf(5)).execute();
			} else {
			    break;
			}
			System.out.println("Bắt đầu Thread sleep 4000");
			Thread.sleep(1000);
			System.out.println("Thoát ra Thread sleep 4000");
		    } catch (InterruptedException ex) {
			Logger.getLogger(loadDataMultiThread.class.getName()).log(Level.SEVERE, null, ex);
		    }
		    System.out.println("Bắt đầu quay lại vòng lặp");
		}

	    } catch (IOException | MessagingException ex) {
	    }
	}
    }

    static class threadLoadJlist extends Thread {

	@Override
	public void run() {
	    System.out.println("Load Ob to Jlist");
	    while (true) {
		loadData_JList.setModel(listMail);
		loadData_JList.setVisible(true);
		listMail = (DefaultListModel) loadData_JList.getModel();
		try {
		    System.out.println("Bắt đầu Thread sleep 2000");
		    Thread.sleep(4000);
		    System.out.println("Kết thúc Thread sleep 2000");
		} catch (InterruptedException ex) {
		    Logger.getLogger(loadDataMultiThread.class.getName()).log(Level.SEVERE, null, ex);
		}
		System.out.println("Bắt đầu quay lại vòng lặp 2");
	    }
	}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(loadDataMultiThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(loadDataMultiThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(loadDataMultiThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(loadDataMultiThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		new loadDataMultiThread().setVisible(true);
	    }
	});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JList<String> loadData_JList;
    private javax.swing.JButton loadData_bt;
    // End of variables declaration//GEN-END:variables
}
